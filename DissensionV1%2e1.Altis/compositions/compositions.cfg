class CfgCompositions {
    class HeavyBunker { //Name that the composition is spawned by
        #include "HeavyBunker.sqe" //Renamed composition.sqe
    };
    class AirTower {
        #include "AirTower.sqe" 
    };
    class Artillery {
        #include "Artillery.sqe" 
    };				
	class DefendPointA {
		#include "DefendPointA.sqe"
	};
	class SH1 {
		#include "SH1.sqe"
	};	
	class SH2 {
		#include "SH2.sqe"
	};
	class SH3 {
		#include "SH3.sqe"
	};
	class Barracks {
		#include "Barracks.sqe"
	};
	class HeavyCamp1 {
		#include "HeavyCamp1.sqe"
	};		
};

/*


_compReference = [ COMP_NAME, POS_ATL, OFFSET, DIR, ALIGN_TERRAIN, ALIGN_WATER ] call LARs_fnc_spawnComp;

_nearestbuilding = nearestBuilding player;

private _Offset = [-0.662109,-1.18652,0.499001];
private _HousePos = getposATL HouseTest;
private _FinalPos = [((_HousePos select 0) - (_Offset select 0)),((_HousePos select 1) - (_Offset select 1)),((_Offset select 2) - (_HousePos select 2))];
player setpos _FinalPos;
hint format ["%1",_FinalPos];
_compReference = [ "HeavyBunker", (getpos player), [0,0,0], (random 360), true, true ] call LARs_fnc_spawnComp; 
_compReference spawn {sleep 5;[ _this ] call LARs_fnc_deleteComp; };

218.499

_nearestbuilding = nearestBuilding player;
_compReference = [ "Test3", _nearestbuilding, [0,0,0],10, true, true ] call LARs_fnc_spawnComp; 
_compReference spawn {sleep 5;[ _this ] call LARs_fnc_deleteComp; };

_nearestbuilding = nearestBuilding player; 
_compReference = [ "Test3", _nearestbuilding, [0,0,0],15, true, true ] call LARs_fnc_spawnComp;  
_compReference spawn {sleep 5;[ _this ] call LARs_fnc_deleteComp; }; 
 
[] spawn
{
	for "_x" from 0 to 360 step 1 do 
	{
		hintsilent format ["%1",_x];
		_nearestbuilding = nearestBuilding player; 
		_compReference = [ "Test3", _nearestbuilding, [0,0,0],_x, true, true ] call LARs_fnc_spawnComp;  
		_compReference spawn {sleep 10;[ _this ] call LARs_fnc_deleteComp; }; 
	};


};








_compReference = [ "Test", getPosVisual  HouseTest, [0,0,0], ((getdir HouseTest) - 306.054), true, true ] call LARs_fnc_spawnComp;
_compReference spawn {sleep 5;[ _this ] call LARs_fnc_deleteComp; };

COMP_NAME - Classname given to composition in CfgCompositions
POS_ATL( optional, default compositions saved position ) - Position to spawn composition
If not given or empty array passed then original saved composition position is used
Also accepts OBJECT, MARKER, LOCATION
OFFSET( optional, default none ) - ARRAY [ x, y, z ] ammount to offset composition, as a compositions base pos can vary from what you want when its saved
DIR( optional, deafault 0 ) - Direction to face composition in, If POS_ATL is of type OBJECT, MARKER, LOCATION passing TRUE for direction will use objects direction
ALIGN_TERRAIN( optional, default True ) - BOOL, Whether composition objects should align themselves to their positions surface normal
ALIGN_WATER( optional, default True ) - BOOL, If a composition objects position is over water should they align themselves to sea level

[ _compReference ] call LARs_fnc_deleteComp; - deletes the composition

[ _compReference ] call LARs_fnc_getCompObjects - will return an array of all composition items

[ _compReference, _item ] call Lars_fnc_getCompItem - Passing an Object will return its composition ID or -1 if not found.
Passing an ID will return the object or objNull if not found.

[ _item ] call LARs_fnc_getItemComp - Will return a the reference to the composition the item belongs to or "".

Checking the RPT with LARs_spawnComp_debug = 1 set in the composition.cfg when spawning a composition will display info on the objects spawned. e.g


"Markers"
"Objects" non unit that are not in deferred objects (see below)
"Triggers" not in deferred triggers (see below)
"Logics"
"Groups" its units and waypoints that are not in deferred groups (see below)
"Deferred Objects"
waypoint that is synced to another waypoint
objects that have a random start position
object that is synced to another object ( only one object is deferred, the one with lowest priority according to this list )
"Deferred Groups" its units and waypoints
groups that have any unit in a vehicle position
groups that have a random start position
"Deferred Triggers"
triggers that are synced to a waypoint
triggers that have a trigger owner
"Init Codes" init codes of everything spawned are run


*/